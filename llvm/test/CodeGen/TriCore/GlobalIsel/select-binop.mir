# RUN: llc -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

---
# Check that we select a 32-bit dataregbank G_ADD into ADD_ddd on dataregbank.
# Also check that we constrain the register class of the COPY to dataregbank.
name:            add_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: add_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[ADD_ddd:%[0-9]+]]:dataregs = ADD_ddd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: $d4 = COPY [[ADD_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_ADD %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_SUB operations.
name:            sub_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: sub_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[SUB_ddd:%[0-9]+]]:dataregs = SUB_ddd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: $d4 = COPY [[SUB_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_SUB %0, %1
    $d4 = COPY %2(s32)
...
