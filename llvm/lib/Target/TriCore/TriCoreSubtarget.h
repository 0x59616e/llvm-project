//===-- TriCoreSubtarget.h - Define Subtarget for the TriCore ---*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the TriCore specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_TRICORE_TRICORESUBTARGET_H
#define LLVM_LIB_TARGET_TRICORE_TRICORESUBTARGET_H

#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "TriCoreGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class TriCoreSubtarget : public TriCoreGenSubtargetInfo {
  virtual void anchor();
  bool allow16BitInst = true;
  bool allow32BitInst = true;

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  TriCoreSubtarget &initializeSubtargetDependencies(StringRef CPU,
                                                    StringRef FS);

public:
  // Initializes the data members to match that of the specified triple.
  TriCoreSubtarget(const Triple &TT, const std::string &CPU,
                   const std::string &FS, const TargetMachine &TM);

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isAllow16BitInst() const { return allow16BitInst; }
  bool isAllow32BitInst() const { return allow32BitInst; }
};
} // namespace llvm

#endif
