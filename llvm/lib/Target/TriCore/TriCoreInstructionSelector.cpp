//===-- TriCoreInstructionSelector.cpp ---------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the InstructionSelector class for
/// TriCore.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "TriCoreRegisterBankInfo.h"
#include "TriCoreSubtarget.h"
#include "TriCoreTargetMachine.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelectorImpl.h"

#define DEBUG_TYPE "tricore-isel"

using namespace llvm;

#define GET_GLOBALISEL_PREDICATE_BITSET
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATE_BITSET

namespace {

class TriCoreInstructionSelector : public InstructionSelector {
public:
  TriCoreInstructionSelector(const TriCoreTargetMachine &TM,
                             const TriCoreSubtarget &STI,
                             const TriCoreRegisterBankInfo &RBI);

  bool select(MachineInstr &I) override;
  static const char *getName() { return DEBUG_TYPE; }

private:
  bool selectImpl(MachineInstr &I, CodeGenCoverage &CoverageInfo) const;

  const TriCoreSubtarget &STI;
  const TriCoreInstrInfo &TII;
  const TriCoreRegisterInfo &TRI;
  const TriCoreRegisterBankInfo &RBI;

#define GET_GLOBALISEL_PREDICATES_DECL
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_DECL

#define GET_GLOBALISEL_TEMPORARIES_DECL
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_DECL
};

} // end anonymous namespace

#define GET_GLOBALISEL_IMPL
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_IMPL

TriCoreInstructionSelector::TriCoreInstructionSelector(
    const TriCoreTargetMachine &TM, const TriCoreSubtarget &STI,
    const TriCoreRegisterBankInfo &RBI)
    : InstructionSelector(), STI(STI), TII(*STI.getInstrInfo()),
      TRI(*STI.getRegisterInfo()), RBI(RBI),

#define GET_GLOBALISEL_PREDICATES_INIT
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_INIT
#define GET_GLOBALISEL_TEMPORARIES_INIT
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_INIT
{
}

bool TriCoreInstructionSelector::select(MachineInstr &I) {
  assert(I.getParent() && "Instruction should be in a basic block!");
  assert(I.getParent()->getParent() && "Instruction should be in a function!");

  if (!isPreISelGenericOpcode(I.getOpcode())) {
    // TODO: Do we need special handling for non-generic instructions?
    return true;
  }

  // make sure no implicit operands are present
  if (I.getNumOperands() != I.getNumExplicitOperands()) {
    LLVM_DEBUG(
        dbgs() << "Generic instruction has unexpected implicit operands.\n");
    return false;
  }

  // Try the TableGen'ed implementation first
  if (selectImpl(I, *CoverageInfo))
    return true;

  LLVM_DEBUG(dbgs() << "Manual instruction selection not supported yet.\n");
  return false;
}

namespace llvm {
InstructionSelector *
createTriCoreInstructionSelector(const TriCoreTargetMachine &TM,
                                 TriCoreSubtarget &Subtarget,
                                 TriCoreRegisterBankInfo &RBI) {
  return new TriCoreInstructionSelector(TM, Subtarget, RBI);
}
} // end namespace llvm
